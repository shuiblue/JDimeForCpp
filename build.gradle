/*
 * Copyright (C) 2013-2014 Olaf Lessenich
 * Copyright (C) 2014-2015 University of Passau, Germany
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 *
 * Contributors:
 *     Olaf Lessenich <lessenic@fim.uni-passau.de>
 *     Georg Seibt <seibt@fim.uni-passau.de>
 */

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'eclipse'

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'res'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}

repositories {
    mavenCentral()
    maven { // for glpk-java
        name = 'Xypron Release'
        url = 'http://rsync.xypron.de/repository'
    }
}

dependencies {
    compile 'commons-io:commons-io:2.4'
    compile 'commons-cli:commons-cli:1.2'
    compile 'org.gnu.glpk:glpk-java:1.0.37'
    compile 'com.thoughtworks.xstream:xstream:1.4.8'
    compile 'de.uni-passau.fim.seibt:kvconfig:1.0'
    compile files('lib/JJ7.jar')
<<<<<<< origin/develop
    testCompile 'junit:junit:4.12'
=======
    compile project(':KVConfig')
    compile 'junit:junit:4.12'
    compile 'org.hamcrest:hamcrest-core:1.3'
    compile 'log4j:log4j:1.2.17'
    compile('com.io7m.xom:xom:1.2.10') {
        transitive = false     }
>>>>>>> HEAD~147
}

def configFile = file('JDime.properties')
def loggingConfigFile = file('JDimeLogging.properties')

task config {
    if (configFile.exists()) {
        inputs.files(configFile)
        outputs.files(configFile)
    }

    if (loggingConfigFile.exists()) {
        inputs.files(loggingConfigFile)
        outputs.files(loggingConfigFile)
    }
}

task natives {
    def fail = false;
    def glpk_version = "4_55"
    def glpk_java_prop_name = "glpkJava"
    def glpk_prop_name = "glpk"
    def glpk_java_name
    def glpk_name

    def os = System.getProperty("os.name").toLowerCase()

    if (os.contains("windows")) {
        glpk_java_name = "glpk_${glpk_version}_java.dll"
        glpk_name = "glpk_${glpk_version}.dll"
    } else if (os.contains("mac")) {
        glpk_java_name = "libglpk_java.dylib"
        glpk_name = "libglpk.dylib"
    } else {
        glpk_java_name = "libglpk_java.so"
        glpk_name = "libglpk.so"
    }

    if (!rootProject.hasProperty(glpk_java_prop_name)) {
        println "Provide the path to the $glpk_java_name native library using the $glpk_java_prop_name property."
        fail = true;
    }
    if (!rootProject.hasProperty(glpk_prop_name)) {
        println "Provide the path to the $glpk_name native library using the $glpk_prop_name property."
        fail = true;
    }

    if (fail) {
        throw new InvalidUserDataException("Missing native library paths.");
    }

    def glpkJavaFile = file(rootProject."$glpk_java_prop_name").getAbsoluteFile()
    def glpkFile = file(rootProject."$glpk_prop_name").getAbsoluteFile()

    if (glpkJavaFile.exists()) {
        if (!glpkJavaFile.isFile() || glpkJavaFile.getName() != glpk_java_name) {
            println "$glpkJavaFile is not a file or does not have the correct name. Expecting $glpk_java_name."
            fail = true;
        }
    } else {
        println "$glpkJavaFile does not exist."
        fail = true;
    }

    if (glpkFile.exists()) {
        if (!glpkFile.isFile() || glpkFile.getName() != glpk_name) {
            println "$glpkFile is not a file or does not have the correct name. Expecting $glpk_name."
            fail = true;
        }
    } else {
        println "$glpkFile does not exist."
        fail = true;
    }

    if (fail) {
        throw new InvalidUserDataException("Invalid native libraries.");
    }

    inputs.files(glpkFile, glpkJavaFile)
    outputs.files(glpkFile, glpkJavaFile)
}

startScripts {
    applicationName = rootProject.name
    mainClassName = "de.fosd.jdime.Main"
    defaultJvmOpts = ["-Xmx2048m", "-ea", "-Djava.library.path=.", "-Djava.util.logging.config.file=${loggingConfigFile.getName()}"]
}

task guiScripts(type: CreateStartScripts) {
    applicationName = "${rootProject.name}_GUI"
    mainClassName = 'de.fosd.jdime.gui.GUI'
    defaultJvmOpts = ["-Djava.util.logging.config.file=${loggingConfigFile.getName()}"]
    outputDir = startScripts.outputDir
    classpath = startScripts.classpath
}

distributions {
    main {
        contents.with {
            def binDir = 'bin'

            into(binDir) {
                from(guiScripts)
                fileMode = 0755
            }
            into(binDir) {
                from(natives)
                from(config)
            }
        }
    }
    test {
        contents.with {
            def binDir = 'bin'

            into(binDir) {
                from(guiScripts)
                fileMode = 0755
            }
            into(binDir) {
                from(natives)
                from(config)
            }
        }
    }
}

run {
    main = 'de.fosd.jdime.Main'

    if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}

test {
    jvmArgs = ["-Xmx2048m", "-ea", "-Djava.library.path=build/install/JDime/bin"]
}

test.dependsOn installDist

allprojects {
    gradle.projectsEvaluated {
        tasks.withType(JavaCompile) {
            // options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
            options.compilerArgs << "-Xlint:deprecation"
        }
    }
}
