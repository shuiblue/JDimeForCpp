<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="testcpp/functionBody/32/B.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Marlin.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>USE_WATCHDOG</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;avr/wdt.h&gt;</cpp:file></cpp:include>

<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"watchdog.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ultralcd.h"</cpp:file></cpp:include>

<comment type="line">//===========================================================================</comment>
<comment type="line">//=============================private variables  ============================</comment>
<comment type="line">//===========================================================================</comment>

<comment type="line">//===========================================================================</comment>
<comment type="line">//=============================functinos         ============================</comment>
<comment type="line">//===========================================================================</comment>


<comment type="line" format="doxygen">/// intialise watch dog with a 4 sec interrupt time</comment>
<function><type><name>void</name></type> <name>watchdog_init</name><parameter_list>()</parameter_list>
<block>{
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WATCHDOG_RESET_MANUAL</name></cpp:ifdef>
    <comment type="line">//We enable the watchdog timer, but only for the interrupt.</comment>
    <comment type="line">//Take care, as this requires the correct order of operation, with interrupts disabled. See the datasheet of any AVR chip for details.</comment>
    <expr_stmt><expr><call><name>wdt_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>_WD_CONTROL_REG</name> = <call><name>_BV</name><argument_list>(<argument><expr><name>_WD_CHANGE_BIT</name></expr></argument>)</argument_list></call> | <call><name>_BV</name><argument_list>(<argument><expr><name>WDE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>_WD_CONTROL_REG</name> = <call><name>_BV</name><argument_list>(<argument><expr><name>WDIE</name></expr></argument>)</argument_list></call> | <name>WDTO_4S</name></expr>;</expr_stmt>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <expr_stmt><expr><call><name>wdt_enable</name><argument_list>(<argument><expr><name>WDTO_4S</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
}</block></function>

<comment type="line" format="doxygen">/// reset watchdog. MUST be called every 1s after init or avr will reset.</comment>
<function><type><name>void</name></type> <name>watchdog_reset</name><parameter_list>()</parameter_list>
<block>{
    <expr_stmt><expr><call><name>wdt_reset</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">//===========================================================================</comment>
<comment type="line">//=============================ISR               ============================</comment>
<comment type="line">//===========================================================================</comment>

<comment type="line">//Watchdog timer interrupt, called if main program blocks &gt;1sec and manual reset is enabled.</comment>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>WATCHDOG_RESET_MANUAL</name></cpp:ifdef>
<macro><name>ISR</name><argument_list>(<argument>WDT_vect</argument>)</argument_list></macro>
<block>{
    <comment type="line">//TODO: This message gets overwritten by the kill() call</comment>
    <expr_stmt><expr><call><name>LCD_ALERTMESSAGEPGM</name><argument_list>(<argument><expr>"ERR:Please Reset"</expr></argument>)</argument_list></call></expr>;</expr_stmt><comment type="line">//16 characters so it fits on a 16x2 display</comment>
    <expr_stmt><expr><call><name>lcd_update</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><name>SERIAL_ERROR_START</name></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>SERIAL_ERRORLNPGM</name><argument_list>(<argument><expr>"Something is wrong, please turn off the printer."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>kill</name><argument_list>()</argument_list></call></expr>;</expr_stmt> <comment type="line">//kill blocks</comment>
    <while>while<condition>(<expr>1</expr>)</condition><empty_stmt>;</empty_stmt></while> <comment type="line">//wait for user or serial reset</comment>
}</block>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif><comment type="line">//RESET_MANUAL</comment>

<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif><comment type="line">//USE_WATCHDOG</comment>
</unit>
