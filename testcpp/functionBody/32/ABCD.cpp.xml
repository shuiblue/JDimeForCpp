<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="testcpp/functionBody/32/ABCD.cpp"><cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Marlin.h"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"cardreader.h"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"ultralcd.h"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"stepper.h"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"temperature.h"</cpp:file></cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"language.h"</cpp:file></cpp:include>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<constructor><name><name>CardReader</name>::<name>CardReader</name></name>
<parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>filesize</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>sdpos</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>sdprinting</name> = false</expr>;</expr_stmt>
    <expr_stmt><expr><name>cardOK</name> = false</expr>;</expr_stmt>
    <expr_stmt><expr><name>saving</name> = false</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>logging</name> = false</expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>autostart_atmillis</name>=0</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>workDirDepth</name> = 0</expr>;</expr_stmt>
    <expr_stmt><expr><name>file_subcall_ctr</name>=0</expr>;</expr_stmt>
    <expr_stmt><expr><call><name>memset</name><argument_list>(<argument><expr><name>workDirParents</name></expr></argument>, <argument><expr>0</expr></argument>, <argument><expr><sizeof>sizeof<argument_list>(<argument><expr><name>workDirParents</name></expr></argument>)</argument_list></sizeof></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>autostart_stilltocheck</name>=true</expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">//the sd start is delayed, because otherwise the serial cannot answer fast enought to make contact with the hostsoftware.</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">//the SD start is delayed, because otherwise the serial cannot answer fast enough to make contact with the host software.</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <expr_stmt><expr><name>lastnr</name>=0</expr>;</expr_stmt>
<comment type="line">//power to SD reader</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>SDPOWER</name> &gt; -1 &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> ) || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>SDPOWER</name> &gt; -1 &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> ) || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>SDPOWER</name> &gt; -1 &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> ) || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>SDPOWER</name> &gt; -1 &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> )</expr></cpp:if>
    <expr_stmt><expr><call><name>SET_OUTPUT</name><argument_list>(<argument><expr><name>SDPOWER</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>WRITE</name><argument_list>(<argument><expr><name>SDPOWER</name></expr></argument>,<argument><expr><name>HIGH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<comment type="line">//SDPOWER</comment>
    <expr_stmt><expr><name>autostart_atmillis</name>=<call><name>millis</name><argument_list>()</argument_list></call>+5000</expr>;</expr_stmt>
}</block></constructor>
<function><type><name>char</name> *</type> <name>createFilename</name>
<parameter_list>(<param><decl><type><name>char</name> *</type><name>buffer</name></decl></param>,<param><decl><type><specifier>const</specifier> <name>dir_t</name> &amp;</type><name>p</name></decl></param>)</parameter_list>
<comment type="line">//buffer&gt;12characters</comment>
<block>{
    <decl_stmt><decl><type><name>char</name> *</type><name>pos</name><init>=<expr><name>buffer</name></expr></init></decl>;</decl_stmt>
    <for>for(<init><decl><type><name>uint8_t</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; 11</expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
        <if>if
        <condition>(<expr><name><name>p</name>.<name>name</name><index>[<expr><name>i</name></expr>]</index></name> == ' '</expr>)</condition><then>
            <continue>continue;</continue></then></if>
        <if>if
        <condition>(<expr><name>i</name> == 8</expr>)</condition><then> <block>{
            <expr_stmt><expr>*<name>pos</name>++='.'</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr>*<name>pos</name>++=<name><name>p</name>.<name>name</name><index>[<expr><name>i</name></expr>]</index></name></expr>;</expr_stmt>
    }</block></for>
    <expr_stmt><expr>*<name>pos</name>++=0</expr>;</expr_stmt>
    <return>return <expr><name>buffer</name></expr>;</return>
}</block></function>
<decl_stmt><decl><type><name>void</name></type> <name><name>CardReader</name>::<name>lsDive</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <argument_list>(<argument><expr>const <name>char</name> *<name>prepend</name></expr></argument>,<argument><expr><name>SdFile</name> <name>parent</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>

    <argument_list>(<argument><expr>const <name>char</name> *<name>prepend</name></expr></argument>, <argument><expr><name>SdFile</name> <name>parent</name></expr></argument>, <argument><expr>const <name>char</name> * const <name>match</name></expr></argument><comment type="block">/*=NULL*/</comment>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<argument_list>{
    <argument><expr><name>dir_t</name> <name>p</name></expr></argument>;
    <argument><expr><name>uint8_t</name> <name>cnt</name>=0</expr></argument>;
    while
    <argument><expr>(<call><name><name>parent</name>.<name>readDir</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>longFilename</name></expr></argument>)</argument_list></call> &gt; 0) <block>{
        <if>if
        <condition>( <expr><call><name>DIR_IS_SUBDIR</name><argument_list>(<argument><expr>&amp;<name>p</name></expr></argument>)</argument_list></call> &amp;&amp; <name>lsAction</name>!=<name>LS_Count</name> &amp;&amp; <name>lsAction</name>!=<name>LS_GetFilename</name></expr>)</condition><then>
<comment type="line">// hence LS_SerialPrint</comment>
            <decl_stmt><decl><type><name>char</name> <name>path</name><index>[<expr>13*2</expr>]</index></type></decl>;</decl_stmt></then></if>
        <name>char</name> <name><name>lfilename</name><index>[<expr>13</expr>]</index></name></block></expr></argument>;
        <argument><expr><call><name>createFilename</name><argument_list>(<argument><expr><name>lfilename</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><name><name>path</name><index>[<expr>0</expr>]</index></name>=0</expr></argument>;
        if
        <argument><expr>(<call><name>strlen</name><argument_list>(<argument><expr><name>prepend</name></expr></argument>)</argument_list></call>==0)
<comment type="line">//avoid leading / if already in prepend</comment>
            <call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr>"/"</expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><name>prepend</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr><name>lfilename</name></expr></argument>)</argument_list></call></expr></argument>;
        <argument><expr><call><name>strcat</name><argument_list>(<argument><expr><name>path</name></expr></argument>,<argument><expr>"/"</expr></argument>)</argument_list></call></expr></argument>;
<comment type="line">//Serial.print(path);</comment>
        <argument><expr><name>SdFile</name> <name>dir</name></expr></argument>;
        if
        <argument><expr>(!<call><name><name>dir</name>.<name>open</name></name><argument_list>(<argument><expr><name>parent</name></expr></argument>,<argument><expr><name>lfilename</name></expr></argument>, <argument><expr><name>O_READ</name></expr></argument>)</argument_list></call>) <block>{
            <if>if
            <condition>(<expr><name>lsAction</name>==<name>LS_SerialPrint</name></expr>)</condition><then> <expr_stmt><expr><block>{
                <expr><name>SERIAL_ECHO_START</name></expr>;
                <call><name>SERIAL_ECHOLN</name><argument_list>(<argument><expr><name>MSG_SD_CANT_OPEN_SUBDIR</name></expr></argument>)</argument_list></call></block></expr>;</expr_stmt></then></if>
                <call><name>SERIAL_ECHOLN</name><argument_list>(<argument><expr><name>lfilename</name></expr></argument>)</argument_list></call></block></expr></argument>;
            }</argument_list></decl></decl_stmt>
        }
        lsDive<expr_stmt><expr>(<name>path</name>,<name>dir</name>)</expr>;</expr_stmt>
<comment type="line">//close done automatically by destructor of SdFile</comment>
        <else>else <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <decl_stmt><decl><type><name>char</name></type> <name>pn0</name> <init>= <expr><name><name>p</name>.<name>name</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <if>if
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <condition>(<expr><name><name>p</name>.<name>name</name><index>[<expr>0</expr>]</index></name> == <name>DIR_NAME_FREE</name></expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <expr_stmt><expr>(<name>pn0</name> == <name>DIR_NAME_FREE</name>)</expr></expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <break>break;</break>
            <if>if
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <condition>(<expr><name><name>p</name>.<name>name</name><index>[<expr>0</expr>]</index></name> == <name>DIR_NAME_DELETED</name> || <name><name>p</name>.<name>name</name><index>[<expr>0</expr>]</index></name> == '.'|| <name><name>p</name>.<name>name</name><index>[<expr>0</expr>]</index></name> == '_'</expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <expr_stmt><expr>(<name>pn0</name> == <name>DIR_NAME_DELETED</name> || <name>pn0</name> == '.' || <name>pn0</name> == '_')</expr></expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <continue>continue;</continue>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <decl_stmt><decl><type><name>char</name></type> <name>lf0</name> <init>= <expr><name><name>longFilename</name><index>[<expr>0</expr>]</index></name></expr></init></decl>;</decl_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <if>if
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <condition>(<expr><name><name>longFilename</name><index>[<expr>0</expr>]</index></name> != '\0' &amp;&amp;
                    (<name><name>longFilename</name><index>[<expr>0</expr>]</index></name> == '.' || <name><name>longFilename</name><index>[<expr>0</expr>]</index></name> == '_')</expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <expr_stmt><expr>(<name>lf0</name> == '.' || <name>lf0</name> == '_')</expr></expr_stmt></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <continue>continue;</continue>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if>if <condition>( <expr><name><name>p</name>.<name>name</name><index>[<expr>0</expr>]</index></name> == '.'</expr>)</condition><then> <block>{
                <if>if <condition>( <expr><name><name>p</name>.<name>name</name><index>[<expr>1</expr>]</index></name> != '.'</expr>)</condition><then>
                    <continue>continue;</continue></then></if>
            }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <if>if
            <condition>(<expr>!<call><name>DIR_IS_FILE_OR_SUBDIR</name><argument_list>(<argument><expr>&amp;<name>p</name></expr></argument>)</argument_list></call></expr>)</condition><then>
                <continue>continue;</continue></then></if>
            <expr_stmt><expr><name>filenameIsDir</name>=<call><name>DIR_IS_SUBDIR</name><argument_list>(<argument><expr>&amp;<name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if
            <condition>(<expr>!<name>filenameIsDir</name></expr>)</condition><then> <block>{
                <if>if
                <condition>(<expr><name><name>p</name>.<name>name</name><index>[<expr>8</expr>]</index></name>!='G'</expr>)</condition><then>
                    <continue>continue;</continue></then></if>
                <if>if
                <condition>(<expr><name><name>p</name>.<name>name</name><index>[<expr>9</expr>]</index></name>=='~'</expr>)</condition><then>
                    <continue>continue;</continue></then></if>
            }</block></then></if>
<comment type="line">//if(cnt++!=nr) continue;</comment>
            <expr_stmt><expr><call><name>createFilename</name><argument_list>(<argument><expr><name>filename</name></expr></argument>,<argument><expr><name>p</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <if>if
            <condition>(<expr><name>lsAction</name>==<name>LS_SerialPrint</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>SERIAL_PROTOCOL</name><argument_list>(<argument><expr><name>prepend</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOLLN</name><argument_list>(<argument><expr><name>filename</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <if>if
            <condition>(<expr><name>lsAction</name>==<name>LS_Count</name></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>nrFiles</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <if>if
            <condition>(<expr><name>lsAction</name>==<name>LS_GetFilename</name></expr>)</condition><then> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <if>if<condition>(<expr><name>cnt</name>==<name>nrFiles</name></expr>)</condition><then>
                    <return>return;</return></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <if>if <condition>(<expr><name>match</name> != <name>NULL</name></expr>)</condition><then> <block>{
                    <if>if <condition>(<expr><call><name>strcasecmp</name><argument_list>(<argument><expr><name>match</name></expr></argument>, <argument><expr><name>filename</name></expr></argument>)</argument_list></call> == 0</expr>)</condition><then> <return>return;</return></then></if>
                }</block></then> <else>else <if>if <condition>(<expr><name>cnt</name> == <name>nrFiles</name></expr>)</condition><then> <return>return;</return></then></if></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
                <expr_stmt><expr><name>cnt</name>++</expr>;</expr_stmt>
            }</block></then></if></else></if></else></if>
        }</block></else>
    }
}
<function><type><name>void</name></type> <name><name>CardReader</name>::<name>ls</name></name>
<parameter_list>()</parameter_list> <block>{
    <expr_stmt><expr><name>lsAction</name>=<name>LS_SerialPrint</name></expr>;</expr_stmt>
    <if>if
    <condition>(<expr><name>lsAction</name>==<name>LS_Count</name></expr>)</condition><then>
        <expr_stmt><expr><name>nrFiles</name>=0</expr>;</expr_stmt></then></if>
    <expr_stmt><expr><call><name><name>root</name>.<name>rewind</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>lsDive</name><argument_list>(<argument><expr>""</expr></argument>,<argument><expr><name>root</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
<function><type><name>void</name></type> <name><name>CardReader</name>::<name>initsd</name></name>
<parameter_list>()</parameter_list> <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>cardOK</name> = false</expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name><name>root</name>.<name>isOpen</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>root</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDSLOW</name></cpp:ifdef>
    <if>if <condition>(<expr>!<call><name><name>card</name>.<name>init</name></name><argument_list>(<argument><expr><name>SPI_HALF_SPEED</name></expr></argument>,<argument><expr><name>SDSS</name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LCD_SDSS</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>LCD_SDSS</name> != <name>SDSS</name>)</expr></cpp:if>
            &amp;&amp; !<call><name><name>card</name>.<name>init</name></name><argument_list>(<argument><expr><name>SPI_HALF_SPEED</name></expr></argument>,<argument><expr><name>LCD_SDSS</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
       )</condition><then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if>if <condition>(<expr>!<macro><name>card</name></macro>.<call><name>init</name><argument_list>(<argument><expr><name>SPI_FULL_SPEED</name></expr></argument>,<argument><expr><name>SDSS</name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LCD_SDSS</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>LCD_SDSS</name> != <name>SDSS</name>)</expr></cpp:if>
            &amp;&amp; !<call><name><name>card</name>.<name>init</name></name><argument_list>(<argument><expr><name>SPI_FULL_SPEED</name></expr></argument>,<argument><expr><name>LCD_SDSS</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
       )</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
        <comment type="line">//if (!card.init(SPI_HALF_SPEED,SDSS))</comment>
        <expr_stmt><expr><name>SERIAL_ECHO_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ECHOLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_INIT_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>volume</name>.<name>init</name></name><argument_list>(<argument><expr>&amp;<name>card</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>SERIAL_ERROR_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ERRORLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_VOL_INIT_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>root</name>.<name>openRoot</name></name><argument_list>(<argument><expr>&amp;<name>volume</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>SERIAL_ERROR_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ERRORLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_OPENROOT_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cardOK</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name>SERIAL_ECHO_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ECHOLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_CARD_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if></else></if></then></if>
    <expr_stmt><expr><name>workDir</name>=<name>root</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>curDir</name>=&amp;<name>root</name></expr>;</expr_stmt>
    <comment type="block">/*
    if(!workDir.openRoot(&amp;volume))
    {
      SERIAL_ECHOLNPGM(MSG_SD_WORKDIR_FAIL);
    }
    */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>cardOK</name> = false</expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name><name>root</name>.<name>isOpen</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>root</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDSLOW</name></cpp:ifdef>
    <if>if <condition>(<expr>!<call><name><name>card</name>.<name>init</name></name><argument_list>(<argument><expr><name>SPI_HALF_SPEED</name></expr></argument>,<argument><expr><name>SDSS</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if>if <condition>(<expr>!<call><name><name>card</name>.<name>init</name></name><argument_list>(<argument><expr><name>SPI_FULL_SPEED</name></expr></argument>,<argument><expr><name>SDSS</name></expr></argument>)</argument_list></call></expr>)</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
        <comment type="line">//if (!card.init(SPI_HALF_SPEED,SDSS))</comment>
        <expr_stmt><expr><name>SERIAL_ECHO_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ECHOLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_INIT_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>volume</name>.<name>init</name></name><argument_list>(<argument><expr>&amp;<name>card</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>SERIAL_ERROR_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ERRORLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_VOL_INIT_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>root</name>.<name>openRoot</name></name><argument_list>(<argument><expr>&amp;<name>volume</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>SERIAL_ERROR_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ERRORLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_OPENROOT_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cardOK</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name>SERIAL_ECHO_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ECHOLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_CARD_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if></else></if></then></if>
    <expr_stmt><expr><name>workDir</name>=<name>root</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>curDir</name>=&amp;<name>root</name></expr>;</expr_stmt>
    <comment type="block">/*
    if(!workDir.openRoot(&amp;volume))
    {
      SERIAL_ECHOLNPGM(MSG_SD_WORKDIR_FAIL);
    }
    */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <expr_stmt><expr><name>cardOK</name> = false</expr>;</expr_stmt>
    <if>if<condition>(<expr><call><name><name>root</name>.<name>isOpen</name></name><argument_list>()</argument_list></call></expr>)</condition><then>
        <expr_stmt><expr><call><name><name>root</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt></then></if>
<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>SDSLOW</name></cpp:ifdef>
    <if>if <condition>(<expr>!<call><name><name>card</name>.<name>init</name></name><argument_list>(<argument><expr><name>SPI_HALF_SPEED</name></expr></argument>,<argument><expr><name>SDSS</name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LCD_SDSS</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>LCD_SDSS</name> != <name>SDSS</name>)</expr></cpp:if>
            &amp;&amp; !<call><name><name>card</name>.<name>init</name></name><argument_list>(<argument><expr><name>SPI_HALF_SPEED</name></expr></argument>,<argument><expr><name>LCD_SDSS</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
       )</condition><then>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
    <if>if <condition>(<expr>!<macro><name>card</name></macro>.<call><name>init</name><argument_list>(<argument><expr><name>SPI_FULL_SPEED</name></expr></argument>,<argument><expr><name>SDSS</name></expr></argument>)</argument_list></call>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name><argument_list>(<argument><expr><name>LCD_SDSS</name></expr></argument>)</argument_list></call> &amp;&amp; (<name>LCD_SDSS</name> != <name>SDSS</name>)</expr></cpp:if>
            &amp;&amp; !<call><name><name>card</name>.<name>init</name></name><argument_list>(<argument><expr><name>SPI_FULL_SPEED</name></expr></argument>,<argument><expr><name>LCD_SDSS</name></expr></argument>)</argument_list></call></expr>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
       )</condition><then>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <block>{
        <comment type="line">//if (!card.init(SPI_HALF_SPEED,SDSS))</comment>
        <expr_stmt><expr><name>SERIAL_ECHO_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ECHOLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_INIT_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>volume</name>.<name>init</name></name><argument_list>(<argument><expr>&amp;<name>card</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>SERIAL_ERROR_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ERRORLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_VOL_INIT_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <if>if <condition>(<expr>!<call><name><name>root</name>.<name>openRoot</name></name><argument_list>(<argument><expr>&amp;<name>volume</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
        <expr_stmt><expr><name>SERIAL_ERROR_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ERRORLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_OPENROOT_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></then> <else>else <block>{
        <expr_stmt><expr><name>cardOK</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><name>SERIAL_ECHO_START</name></expr>;</expr_stmt>
        <expr_stmt><expr><call><name>SERIAL_ECHOLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_CARD_OK</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></else></if></else></if></else></if></then></if>
    <expr_stmt><expr><name>workDir</name>=<name>root</name></expr>;</expr_stmt>
    <expr_stmt><expr><name>curDir</name>=&amp;<name>root</name></expr>;</expr_stmt>
    <comment type="block">/*
    if(!workDir.openRoot(&amp;volume))
    {
      SERIAL_ECHOLNPGM(MSG_SD_WORKDIR_FAIL);
    }
    */</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <function><type><name>void</name></type> <name><name>CardReader</name>::<name>setroot</name></name>
    <parameter_list>()</parameter_list> <block>{
        <comment type="block">/*if(!workDir.openRoot(&amp;volume))
          {
            SERIAL_ECHOLNPGM(MSG_SD_WORKDIR_FAIL);
          }*/</comment>
        <expr_stmt><expr><name>workDir</name>=<name>root</name></expr>;</expr_stmt>
        <expr_stmt><expr><name>curDir</name>=&amp;<name>workDir</name></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name><name>CardReader</name>::<name>release</name></name>
    <parameter_list>()</parameter_list> <block>{
        <expr_stmt><expr><name>sdprinting</name> = false</expr>;</expr_stmt>
        <expr_stmt><expr><name>cardOK</name> = false</expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name><name>CardReader</name>::<name>startFileprint</name></name>
    <parameter_list>()</parameter_list> <block>{
        <if>if
        <condition>(<expr><name>cardOK</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sdprinting</name> = true</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    <function><type><name>void</name></type> <name><name>CardReader</name>::<name>pauseSDPrint</name></name>
    <parameter_list>()</parameter_list> <block>{
        <if>if
        <condition>(<expr><name>sdprinting</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>sdprinting</name> = false</expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <function><type><name>void</name></type> <name><name>CardReader</name>::<name>openLogFile</name></name><parameter_list>(<param><decl><type><name>char</name>*</type> <name>name</name></decl></param>)</parameter_list> <block>{
        <expr_stmt><expr><name>logging</name> = true</expr>;</expr_stmt>
        <expr_stmt><expr><call><name>openFile</name><argument_list>(<argument><expr><name>name</name></expr></argument>, <argument><expr>false</expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></function>
    <function><type><name>void</name></type> <name><name>CardReader</name>::<name>getAbsFilename</name></name><parameter_list>(<param><decl><type><name>char</name> *</type><name>t</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>uint8_t</name></type> <name>cnt</name><init>=<expr>0</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr>*<name>t</name>='/'</expr>;</expr_stmt>
        <expr_stmt><expr><name>t</name>++</expr>;</expr_stmt>
        <expr_stmt><expr><name>cnt</name>++</expr>;</expr_stmt>
        <for>for(<init><decl><type><name>uint8_t</name></type> <name>i</name><init>=<expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;<name>workDirDepth</name></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
            <expr_stmt><expr><name><name>workDirParents</name><index>[<expr><name>i</name></expr>]</index></name>.<call><name>getFilename</name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt> <comment type="line">//SDBaseFile.getfilename!</comment>
            <while>while<condition>(<expr>*<name>t</name>!=0 &amp;&amp; <name>cnt</name>&lt; <name>MAXPATHNAMELENGTH</name></expr>)</condition> <block>{
                <expr_stmt><expr><name>t</name>++</expr>;</expr_stmt>    <comment type="line">//crawl counter forward.</comment>
                <expr_stmt><expr><name>cnt</name>++</expr>;</expr_stmt>
            }</block></while>
        }</block></for>
        <if>if<condition>(<expr><name>cnt</name>&lt;<name>MAXPATHNAMELENGTH</name>-13</expr>)</condition><then>
            <expr_stmt><expr><call><name><name>file</name>.<name>getFilename</name></name><argument_list>(<argument><expr><name>t</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name><name>t</name><index>[<expr>0</expr>]</index></name>=0</expr>;</expr_stmt></else></if>
    }</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <decl_stmt><decl><type><name>void</name></type> <name><name>CardReader</name>::<name>openFile</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <argument_list>(<argument><expr><name>char</name>* <name>name</name></expr></argument>,<argument><expr><name>bool</name> <name>read</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <argument_list>(<argument><expr><name>char</name>* <name>name</name></expr></argument>,<argument><expr><name>bool</name> <name>read</name></expr></argument>, <argument><expr><name>bool</name> <name>replace_current</name></expr></argument><comment type="block">/*=true*/</comment>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <argument_list>{
        if
        <argument><expr>(!<name>cardOK</name>)</expr></argument>
            <return>return;</return></argument_list></decl></decl_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name><name>file</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if>if<condition>(<expr><call><name><name>file</name>.<name>isOpen</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{ <comment type="line">//replacing current file by new file, or subfile call</comment>
            <if>if<condition>(<expr>!<name>replace_current</name></expr>)</condition><then> <block>{
                <if>if<condition>(<expr>(<name>int</name>)<name>file_subcall_ctr</name>&gt;(<name>int</name>)<name>SD_PROCEDURE_DEPTH</name>-1</expr>)</condition><then> <block>{
                    <expr_stmt><expr><name>SERIAL_ERROR_START</name></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>SERIAL_ERRORPGM</name><argument_list>(<argument><expr>"trying to call sub-gcode files with too many levels. MAX level is:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>SERIAL_ERRORLN</name><argument_list>(<argument><expr><name>SD_PROCEDURE_DEPTH</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>kill</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                    <return>return;</return>
                }</block></then></if>
                <expr_stmt><expr><name>SERIAL_ECHO_START</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_ECHOPGM</name><argument_list>(<argument><expr>"SUBROUTINE CALL target:\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_ECHO</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_ECHOPGM</name><argument_list>(<argument><expr>"\" parent:\""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <comment type="line">//store current filename and position</comment>
                <expr_stmt><expr><call><name>getAbsFilename</name><argument_list>(<argument><expr><name><name>filenames</name><index>[<expr><name>file_subcall_ctr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_ECHO</name><argument_list>(<argument><expr><name><name>filenames</name><index>[<expr><name>file_subcall_ctr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_ECHOPGM</name><argument_list>(<argument><expr>"\" pos"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_ECHOLN</name><argument_list>(<argument><expr><name>sdpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name><name>filespos</name><index>[<expr><name>file_subcall_ctr</name></expr>]</index></name>=<name>sdpos</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>file_subcall_ctr</name>++</expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>SERIAL_ECHO_START</name></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_ECHOPGM</name><argument_list>(<argument><expr>"Now doing file: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_ECHOLN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
            <expr_stmt><expr><call><name><name>file</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{ <comment type="line">//opening fresh file</comment>
            <expr_stmt><expr><name>file_subcall_ctr</name>=0</expr>;</expr_stmt> <comment type="line">//resetting procedure depth in case user cancels print while in procedure</comment>
            <expr_stmt><expr><name>SERIAL_ECHO_START</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SERIAL_ECHOPGM</name><argument_list>(<argument><expr>"Now fresh file: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SERIAL_ECHOLN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
        <expr_stmt><expr><name>sdprinting</name> = false</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SdFile</name></type> <name>myDir</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>curDir</name>=&amp;<name>root</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name> *</type><name>fname</name><init>=<expr><name>name</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> *</type><name>dirname_start</name></decl>,*<decl><type ref="prev"/><name>dirname_end</name></decl>;</decl_stmt>
        <if>if
        <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name>=='/'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dirname_start</name>=<call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr>'/'</expr></argument>)</argument_list></call>+1</expr>;</expr_stmt>
            <while>while
            <condition>(<expr><name>dirname_start</name>&gt;0</expr>)</condition> <block>{
                <expr_stmt><expr><name>dirname_end</name>=<call><name>strchr</name><argument_list>(<argument><expr><name>dirname_start</name></expr></argument>,<argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//SERIAL_ECHO("start:");SERIAL_ECHOLN((int)(dirname_start-name));</comment>
<comment type="line">//SERIAL_ECHO("end  :");SERIAL_ECHOLN((int)(dirname_end-name));</comment>
                <if>if
                <condition>(<expr><name>dirname_end</name>&gt;0 &amp;&amp; <name>dirname_end</name>&gt;<name>dirname_start</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>char</name></type> <name><name>subdirname</name><index>[<expr>13</expr>]</index></name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>subdirname</name></expr></argument>, <argument><expr><name>dirname_start</name></expr></argument>, <argument><expr><name>dirname_end</name>-<name>dirname_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>subdirname</name><index>[<expr><name>dirname_end</name>-<name>dirname_start</name></expr>]</index></name>=0</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>SERIAL_ECHOLN</name><argument_list>(<argument><expr><name>subdirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if
                    <condition>(<expr>!<call><name><name>myDir</name>.<name>open</name></name><argument_list>(<argument><expr><name>curDir</name></expr></argument>,<argument><expr><name>subdirname</name></expr></argument>,<argument><expr><name>O_READ</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>SERIAL_PROTOCOLPGM</name><argument_list>(<argument><expr><name>MSG_SD_OPEN_FILE_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>SERIAL_PROTOCOL</name><argument_list>(<argument><expr><name>subdirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>SERIAL_PROTOCOLLNPGM</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                    }</block></then> <else>else <block>{
<comment type="line">//SERIAL_ECHOLN("dive ok");</comment>
                    }</block></else></if>
                    <expr_stmt><expr><name>curDir</name>=&amp;<name>myDir</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>dirname_start</name>=<name>dirname_end</name>+1</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
<comment type="line">// the reminder after all /fsa/fdsa/ is the filename</comment>
                    <expr_stmt><expr><name>fname</name>=<name>dirname_start</name></expr>;</expr_stmt>
<comment type="line">//SERIAL_ECHOLN("remaider");</comment>
<comment type="line">//SERIAL_ECHOLN(fname);</comment>
                    <break>break;</break>
                }</block></else></if>
            }</block></while>
        }</block></then> <else>else <block>{
<comment type="line">//relative path</comment>
            <expr_stmt><expr><name>curDir</name>=&amp;<name>workDir</name></expr>;</expr_stmt>
        }</block></else></if>
        <if>if
        <condition>(<expr><name>read</name></expr>)</condition><then> <block>{
            <if>if
            <condition>(<expr><call><name><name>file</name>.<name>open</name></name><argument_list>(<argument><expr><name>curDir</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>O_READ</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>filesize</name> = <call><name><name>file</name>.<name>fileSize</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOLPGM</name><argument_list>(<argument><expr><name>MSG_SD_FILE_OPENED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOL</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOLPGM</name><argument_list>(<argument><expr><name>MSG_SD_SIZE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOLLN</name><argument_list>(<argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>sdpos</name> = 0</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOLLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_FILE_SELECTED</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <expr_stmt><expr><call><name>lcd_setstatus</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <expr_stmt><expr><call><name>getfilename</name><argument_list>(<argument><expr>0</expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
                <expr_stmt><expr><call><name>lcd_setstatus</name><argument_list>(<argument><expr><name><name>longFilename</name><index>[<expr>0</expr>]</index></name> ? <name>longFilename</name> : <name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name>SERIAL_PROTOCOLPGM</name><argument_list>(<argument><expr><name>MSG_SD_OPEN_FILE_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOL</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOLLNPGM</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></then> <else>else <block>{
<comment type="line">//write</comment>
            <if>if
            <condition>(<expr>!<call><name><name>file</name>.<name>open</name></name><argument_list>(<argument><expr><name>curDir</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>, <argument><expr><name>O_CREAT</name> | <name>O_APPEND</name> | <name>O_WRITE</name> | <name>O_TRUNC</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><call><name>SERIAL_PROTOCOLPGM</name><argument_list>(<argument><expr><name>MSG_SD_OPEN_FILE_FAIL</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOL</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOLLNPGM</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><name>saving</name> = true</expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOLPGM</name><argument_list>(<argument><expr><name>MSG_SD_WRITE_TO_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>SERIAL_PROTOCOLLN</name><argument_list>(<argument><expr><name>name</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name>lcd_setstatus</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></else></if>
        }</block></else></if>
    }</block></function>
    <function><type><name>void</name></type> <name><name>CardReader</name>::<name>removeFile</name></name>
    <parameter_list>(<param><decl><type><name>char</name>*</type> <name>name</name></decl></param>)</parameter_list> <block>{
        <if>if
        <condition>(<expr>!<name>cardOK</name></expr>)</condition><then>
            <return>return;</return></then></if>
        <expr_stmt><expr><call><name><name>file</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sdprinting</name> = false</expr>;</expr_stmt>
        <decl_stmt><decl><type><name>SdFile</name></type> <name>myDir</name></decl>;</decl_stmt>
        <expr_stmt><expr><name>curDir</name>=&amp;<name>root</name></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>char</name> *</type><name>fname</name><init>=<expr><name>name</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name> *</type><name>dirname_start</name></decl>,*<decl><type ref="prev"/><name>dirname_end</name></decl>;</decl_stmt>
        <if>if
        <condition>(<expr><name><name>name</name><index>[<expr>0</expr>]</index></name>=='/'</expr>)</condition><then> <block>{
            <expr_stmt><expr><name>dirname_start</name>=<call><name>strchr</name><argument_list>(<argument><expr><name>name</name></expr></argument>,<argument><expr>'/'</expr></argument>)</argument_list></call>+1</expr>;</expr_stmt>
            <while>while
            <condition>(<expr><name>dirname_start</name>&gt;0</expr>)</condition> <block>{
                <expr_stmt><expr><name>dirname_end</name>=<call><name>strchr</name><argument_list>(<argument><expr><name>dirname_start</name></expr></argument>,<argument><expr>'/'</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<comment type="line">//SERIAL_ECHO("start:");SERIAL_ECHOLN((int)(dirname_start-name));</comment>
<comment type="line">//SERIAL_ECHO("end  :");SERIAL_ECHOLN((int)(dirname_end-name));</comment>
                <if>if
                <condition>(<expr><name>dirname_end</name>&gt;0 &amp;&amp; <name>dirname_end</name>&gt;<name>dirname_start</name></expr>)</condition><then> <block>{
                    <decl_stmt><decl><type><name>char</name></type> <name><name>subdirname</name><index>[<expr>13</expr>]</index></name></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name>strncpy</name><argument_list>(<argument><expr><name>subdirname</name></expr></argument>, <argument><expr><name>dirname_start</name></expr></argument>, <argument><expr><name>dirname_end</name>-<name>dirname_start</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <expr_stmt><expr><name><name>subdirname</name><index>[<expr><name>dirname_end</name>-<name>dirname_start</name></expr>]</index></name>=0</expr>;</expr_stmt>
                    <expr_stmt><expr><call><name>SERIAL_ECHOLN</name><argument_list>(<argument><expr><name>subdirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                    <if>if
                    <condition>(<expr>!<call><name><name>myDir</name>.<name>open</name></name><argument_list>(<argument><expr><name>curDir</name></expr></argument>,<argument><expr><name>subdirname</name></expr></argument>,<argument><expr><name>O_READ</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
                        <expr_stmt><expr><call><name>SERIAL_PROTOCOLPGM</name><argument_list>(<argument><expr>"open failed, File: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>SERIAL_PROTOCOL</name><argument_list>(<argument><expr><name>subdirname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>SERIAL_PROTOCOLLNPGM</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <return>return;</return>
                    }</block></then> <else>else <block>{
<comment type="line">//SERIAL_ECHOLN("dive ok");</comment>
                    }</block></else></if>
                    <expr_stmt><expr><name>curDir</name>=&amp;<name>myDir</name></expr>;</expr_stmt>
                    <expr_stmt><expr><name>dirname_start</name>=<name>dirname_end</name>+1</expr>;</expr_stmt>
                }</block></then> <else>else <block>{
<comment type="line">// the reminder after all /fsa/fdsa/ is the filename</comment>
                    <expr_stmt><expr><name>fname</name>=<name>dirname_start</name></expr>;</expr_stmt>
<comment type="line">//SERIAL_ECHOLN("remaider");</comment>
<comment type="line">//SERIAL_ECHOLN(fname);</comment>
                    <break>break;</break>
                }</block></else></if>
            }</block></while>
        }</block></then> <else>else <block>{
<comment type="line">//relative path</comment>
            <expr_stmt><expr><name>curDir</name>=&amp;<name>workDir</name></expr>;</expr_stmt>
        }</block></else></if>
        <if>if
        <condition>(<expr><call><name><name>file</name>.<name>remove</name></name><argument_list>(<argument><expr><name>curDir</name></expr></argument>, <argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>SERIAL_PROTOCOLPGM</name><argument_list>(<argument><expr>"File deleted:"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><call><name>SERIAL_PROTOCOL</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr_stmt><expr><call><name>SERIAL_PROTOCOLLN</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <expr_stmt><expr><name>sdpos</name> = 0</expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>SERIAL_PROTOCOLPGM</name><argument_list>(<argument><expr>"Deletion failed, File: "</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SERIAL_PROTOCOL</name><argument_list>(<argument><expr><name>fname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SERIAL_PROTOCOLLNPGM</name><argument_list>(<argument><expr>"."</expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    <function><type><name>void</name></type> <name><name>CardReader</name>::<name>getStatus</name></name>
    <parameter_list>()</parameter_list> <block>{
        <if>if
        <condition>(<expr><name>cardOK</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>SERIAL_PROTOCOLPGM</name><argument_list>(<argument><expr><name>MSG_SD_PRINTING_BYTE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SERIAL_PROTOCOL</name><argument_list>(<argument><expr><name>sdpos</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SERIAL_PROTOCOLPGM</name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SERIAL_PROTOCOLLN</name><argument_list>(<argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name>SERIAL_PROTOCOLLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_NOT_PRINTING</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></else></if>
    }</block></function>
    <function><type><name>void</name></type> <name><name>CardReader</name>::<name>write_command</name></name>
    <parameter_list>(<param><decl><type><name>char</name> *</type><name>buf</name></decl></param>)</parameter_list> <block>{
        <decl_stmt><decl><type><name>char</name>*</type> <name>begin</name> <init>= <expr><name>buf</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>*</type> <name>npos</name> <init>= <expr>0</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>char</name>*</type> <name>end</name> <init>= <expr><name>buf</name> + <call><name>strlen</name><argument_list>(<argument><expr><name>buf</name></expr></argument>)</argument_list></call> - 1</expr></init></decl>;</decl_stmt>
        <expr_stmt><expr><name><name>file</name>.<name>writeError</name></name> = false</expr>;</expr_stmt>
        <if>if
        <condition>(<expr>(<name>npos</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>buf</name></expr></argument>, <argument><expr>'N'</expr></argument>)</argument_list></call>) != <name>NULL</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>begin</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>npos</name></expr></argument>, <argument><expr>' '</expr></argument>)</argument_list></call> + 1</expr>;</expr_stmt>
            <expr_stmt><expr><name>end</name> = <call><name>strchr</name><argument_list>(<argument><expr><name>npos</name></expr></argument>, <argument><expr>'*'</expr></argument>)</argument_list></call> - 1</expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><name><name>end</name><index>[<expr>1</expr>]</index></name> = '\r'</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>end</name><index>[<expr>2</expr>]</index></name> = '\n'</expr>;</expr_stmt>
        <expr_stmt><expr><name><name>end</name><index>[<expr>3</expr>]</index></name> = '\0'</expr>;</expr_stmt>
        <expr_stmt><expr><call><name><name>file</name>.<name>write</name></name><argument_list>(<argument><expr><name>begin</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <if>if
        <condition>(<expr><name><name>file</name>.<name>writeError</name></name></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>SERIAL_ERROR_START</name></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>SERIAL_ERRORLNPGM</name><argument_list>(<argument><expr><name>MSG_SD_ERR_WRITE_TO_FILE</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
    }</block></function>
    <function><type><name>void</name></type> <name><name>CardReader</name>::<name>checkautostart</name></name>
    <parameter_list>(<param><decl><type><name>bool</name></type> <name>force</name></decl></param>)</parameter_list> <block>{
        <if>if
        <condition>(<expr>!<name>force</name></expr>)</condition><then> <block>{
            <if>if
            <condition>(<expr>!<name>autostart_stilltocheck</name></expr>)</condition><then>
                <return>return;</return></then></if>
            <if>if
            <condition>(<expr><name>autostart_atmillis</name>&lt;<call><name>millis</name><argument_list>()</argument_list></call></expr>)</condition><then>
                <return>return;</return></then></if>
        }</block></then></if>
        <expr_stmt><expr><name>autostart_stilltocheck</name>=false</expr>;</expr_stmt>
        <if>if
        <condition>(<expr>!<name>cardOK</name></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name>initsd</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <if>if
            <condition>(<expr>!<name>cardOK</name></expr>)</condition><then>
<comment type="line">//fail</comment>
                <return>return;</return></then></if>
        }</block></then></if>
        <decl_stmt><decl><type><name>char</name></type> <name><name>autoname</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>
        <expr_stmt><expr><call><name>sprintf_P</name><argument_list>(<argument><expr><name>autoname</name></expr></argument>, <argument><expr><call><name>PSTR</name><argument_list>(<argument><expr>"auto%i.g"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>lastnr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        <for>for(<init><decl><type><name>int8_t</name></type> <name>i</name><init>=<expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;(<name>int8_t</name>)<call><name>strlen</name><argument_list>(<argument><expr><name>autoname</name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
            <decl_stmt><decl><type><name>dir_t</name></type> <name>p</name></decl>;</decl_stmt></for>
        <expr_stmt><expr><call><name><name>root</name>.<name>rewind</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <decl_stmt><decl><type><name>bool</name></type> <name>found</name><init>=<expr>false</expr></init></decl>;</decl_stmt>
        <while>while
        <condition>(<expr><call><name><name>root</name>.<name>readDir</name></name><argument_list>(<argument><expr><name>p</name></expr></argument>, <argument><expr><name>NULL</name></expr></argument>)</argument_list></call> &gt; 0</expr>)</condition> <block>{
            <for>for(<init><decl><type><name>int8_t</name></type> <name>i</name><init>=<expr>0</expr></init></decl>;</init> <condition><expr><name>i</name>&lt;(<name>int8_t</name>)<call><name>strlen</name><argument_list>(<argument><expr>(<name>char</name>*)<name><name>p</name>.<name>name</name></name></expr></argument>)</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>)
<comment type="line">//Serial.print((char*)p.name);</comment>
<comment type="line">//Serial.print(" ");</comment>
<comment type="line">//Serial.println(autoname);</comment>
                <if>if
                <condition>(<expr><name><name>p</name>.<name>name</name><index>[<expr>9</expr>]</index></name>!='~'</expr>)</condition><then>
<comment type="line">//skip safety copies</comment>
                    <if>if
                    <condition>(<expr><call><name>strncmp</name><argument_list>(<argument><expr>(<name>char</name>*)<name><name>p</name>.<name>name</name></name></expr></argument>,<argument><expr><name>autoname</name></expr></argument>,<argument><expr>5</expr></argument>)</argument_list></call>==0</expr>)</condition><then> <block>{
                        <decl_stmt><decl><type><name>char</name></type> <name><name>cmd</name><index>[<expr>30</expr>]</index></name></decl>;</decl_stmt>
                        <expr_stmt><expr><call><name>sprintf_P</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>, <argument><expr><call><name>PSTR</name><argument_list>(<argument><expr>"M23 %s"</expr></argument>)</argument_list></call></expr></argument>, <argument><expr><name>autoname</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>enquecommand</name><argument_list>(<argument><expr><name>cmd</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><call><name>enquecommand_P</name><argument_list>(<argument><expr><call><name>PSTR</name><argument_list>(<argument><expr>"M24"</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                        <expr_stmt><expr><name>found</name>=true</expr>;</expr_stmt>
                    }</block></then></if></then></if></for>
        }</block></while>
        <if>if
        <condition>(<expr>!<name>found</name></expr>)</condition><then>
            <expr_stmt><expr><name>lastnr</name>=-1</expr>;</expr_stmt></then>
        <else>else
            <expr_stmt><expr><name>lastnr</name>++</expr>;</expr_stmt></else></if>
    }</block></function>
    <decl_stmt><decl><type><name>void</name></type> <name><name>CardReader</name>::<name>closefile</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <argument_list>()</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <argument_list>(<argument><expr><name>bool</name> <name>store_location</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <argument_list>{
        <argument><expr><call><name><name>file</name>.<name>sync</name></name><argument_list>()</argument_list></call></expr></argument>;
        <argument><expr><call><name><name>file</name>.<name>close</name></name><argument_list>()</argument_list></call></expr></argument>;
        <argument><expr><name>saving</name> = false</expr></argument>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <argument><expr><name>logging</name> = false</expr></argument>;
        if<argument><expr>(<name>store_location</name>) <block>{
            <comment type="line">//future: store printer state, filename and position for continuing a stopped print</comment>
            <comment type="line">// so one can unplug the printer and continue printing the next day.</comment>
        }</block></expr></argument>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</argument_list>
    <name>void</name> <name><name>CardReader</name>::<name>getfilename</name></name>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <argument_list>(<argument><expr>const <name>uint8_t</name> <name>nr</name></expr></argument>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
    <argument_list>(<argument><expr><name>uint16_t</name> <name>nr</name></expr></argument>, <argument><expr>const <name>char</name> * const <name>match</name></expr></argument><comment type="block">/*=NULL*/</comment>)</argument_list>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    <argument_list>{
        <argument><expr><name>curDir</name>=&amp;<name>workDir</name></expr></argument>;
        <argument><expr><name>lsAction</name>=<name>LS_GetFilename</name></expr></argument>;
        <argument><expr><name>nrFiles</name>=<name>nr</name></expr></argument>;
        <argument><expr><call><name><name>curDir</name>-&gt;<name>rewind</name></name><argument_list>()</argument_list></call></expr></argument>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <argument><expr><call><name>lsDive</name><argument_list>(<argument><expr>""</expr></argument>,<argument><expr>*<name>curDir</name></expr></argument>)</argument_list></call></expr></argument>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <argument><expr><call><name>lsDive</name><argument_list>(<argument><expr>""</expr></argument>,<argument><expr>*<name>curDir</name></expr></argument>,<argument><expr><name>match</name></expr></argument>)</argument_list></call></expr></argument>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }</argument_list>
    <name>uint16_t</name> <name><name>CardReader</name>::<name>getnrfilenames</name></name>
    <argument_list>()</argument_list> <argument_list>{
        <argument><expr><name>curDir</name>=&amp;<name>workDir</name></expr></argument>;
        <argument><expr><name>lsAction</name>=<name>LS_Count</name></expr></argument>;
        <argument><expr><name>nrFiles</name>=0</expr></argument>;
        <argument><expr><call><name><name>curDir</name>-&gt;<name>rewind</name></name><argument_list>()</argument_list></call></expr></argument>;
        <argument><expr><call><name>lsDive</name><argument_list>(<argument><expr>""</expr></argument>,<argument><expr>*<name>curDir</name></expr></argument>)</argument_list></call></expr></argument>;
<comment type="line">//SERIAL_ECHOLN(nrFiles);</comment>
        return <argument><expr><name>nrFiles</name></expr></argument>;
    }</argument_list>
    <name>void</name> <name><name>CardReader</name>::<name>chdir</name></name>
    <argument_list>(<argument><expr>const <name>char</name> * <name>relpath</name></expr></argument>)</argument_list> <argument_list>{
        <argument><expr><name>SdFile</name> <name>newfile</name></expr></argument>;
        <argument><expr><name>SdFile</name> *<name>parent</name>=&amp;<name>root</name></expr></argument>;
        if
        <argument><expr>(<call><name><name>workDir</name>.<name>isOpen</name></name><argument_list>()</argument_list></call>)
            <name>parent</name>=&amp;<name>workDir</name></expr></argument>;
        if
        <argument><expr>(!<call><name><name>newfile</name>.<name>open</name></name><argument_list>(<argument><expr>*<name>parent</name></expr></argument>,<argument><expr><name>relpath</name></expr></argument>, <argument><expr><name>O_READ</name></expr></argument>)</argument_list></call>) <block>{
            <expr><name>SERIAL_ECHO_START</name></expr>;
            <expr><call><name>SERIAL_ECHOPGM</name><argument_list>(<argument><expr><name>MSG_SD_CANT_ENTER_SUBDIR</name></expr></argument>)</argument_list></call></expr>;
            <expr><call><name>SERIAL_ECHOLN</name><argument_list>(<argument><expr><name>relpath</name></expr></argument>)</argument_list></call></expr>;
        }</block></expr></argument> <else>else <expr_stmt><expr><block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <expr><name>workDirParentParent</name>=<name>workDirParent</name></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
            <if>if <condition>(<expr><name>workDirDepth</name> &lt; <name>MAX_DIR_DEPTH</name></expr>)</condition><then> <expr_stmt><expr><block>{
                <for>for (<init><decl><type><name>int</name> <name>d</name> = ++<name>workDirDepth</name></type></decl>;</init> <condition><expr><name>d</name>--</expr>;</condition><incr/>)
                    <expr_stmt><expr><name><name>workDirParents</name><index>[<expr><name>d</name>+1</expr>]</index></name> = <name><name>workDirParents</name><index>[<expr><name>d</name></expr>]</index></name></expr>;</expr_stmt></for>
                <name><name>workDirParents</name><index>[<expr>0</expr>]</index></name>=*<name>parent</name></block></expr>;</expr_stmt></then></if>
            }</block>
            <name>workDirParent</name>=*<name>parent</name></expr>;</expr_stmt></else>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
            <argument><expr><name>workDir</name>=<name>newfile</name></expr></argument>;
        }</argument_list></decl></decl_stmt>
    }
    void <macro><name>CardReader</name></macro><expr_stmt><expr><name>::<name>updir</name></name>
    () <block>{
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if>if<condition>(<expr>!<call><name><name>workDir</name>.<name>isRoot</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><name>workDir</name>=<name>workDirParent</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>workDirParent</name>=<name>workDirParentParent</name></expr>;</expr_stmt>
        <expr_stmt/></block></then></if>}</block></expr></expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if>if<condition>(<expr><name>workDirDepth</name> &gt; 0</expr>)</condition><then> <block>{
            <expr_stmt><expr>--<name>workDirDepth</name></expr>;</expr_stmt>
            <expr_stmt><expr><name>workDir</name> = <name><name>workDirParents</name><index>[<expr>0</expr>]</index></name></expr>;</expr_stmt>
            <decl_stmt><decl><type><name>int</name></type> <name>d</name></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>d</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>d</name> &lt; <name>workDirDepth</name></expr>;</condition> <incr><expr><name>d</name>++</expr></incr>)
                <expr_stmt><expr><name><name>workDirParents</name><index>[<expr><name>d</name></expr>]</index></name> = <name><name>workDirParents</name><index>[<expr><name>d</name>+1</expr>]</index></name></expr>;</expr_stmt></for>
        }</block></then></if>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }
    void <macro><name>CardReader</name></macro><expr_stmt><expr><name>::<name>printingHasFinished</name></name>
    () <block>{
        <expr><call><name>st_synchronize</name><argument_list>()</argument_list></call></expr>;
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr><call><name>quickStop</name><argument_list>()</argument_list></call></expr>;
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <if>if<condition>(<expr><name>file_subcall_ctr</name>&gt;0</expr>)</condition><then> <block>{ <comment type="line">//heading up to a parent file that called current as a procedure.</comment>
            <expr_stmt><expr><call><name><name>file</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>file_subcall_ctr</name>--</expr>;</expr_stmt>
            <expr_stmt><expr><call><name>openFile</name><argument_list>(<argument><expr><name><name>filenames</name><index>[<expr><name>file_subcall_ctr</name></expr>]</index></name></expr></argument>,<argument><expr>true</expr></argument>,<argument><expr>true</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>setIndex</name><argument_list>(<argument><expr><name><name>filespos</name><index>[<expr><name>file_subcall_ctr</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name>startFileprint</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt/></block></then></if>}</block></expr></expr_stmt> <else>else <block>{
            <expr_stmt><expr><call><name>quickStop</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><call><name><name>file</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>sdprinting</name> = false</expr>;</expr_stmt>
            <if>if<condition>(<expr><name>SD_FINISHED_STEPPERRELEASE</name></expr>)</condition><then> <block>{
                <comment type="line">//finishAndDisableSteppers();</comment>
                <expr_stmt><expr><call><name>enquecommand_P</name><argument_list>(<argument><expr><call><name>PSTR</name><argument_list>(<argument><expr><name>SD_FINISHED_RELEASECOMMAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block></then></if>
            <expr_stmt><expr><call><name>autotempShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        }</block></else>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> &amp;&amp; <call><name>defined</name> <argument_list>(<argument><expr><name>SDSUPPORT</name></expr></argument>)</argument_list></call></expr></cpp:if>
        <expr_stmt><expr><call><name><name>file</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
        <expr_stmt><expr><name>sdprinting</name> = false</expr>;</expr_stmt>
        <if>if<condition>(<expr><name>SD_FINISHED_STEPPERRELEASE</name></expr>)</condition><then> <block>{
            <comment type="line">//finishAndDisableSteppers();</comment>
            <expr_stmt><expr><call><name>enquecommand_P</name><argument_list>(<argument><expr><call><name>PSTR</name><argument_list>(<argument><expr><name>SD_FINISHED_RELEASECOMMAND</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
        }</block></then></if>
        <expr_stmt><expr><call><name>autotempShutdown</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
    }
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><call><name>defined</name> <argument_list>(<argument><expr><name>A</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>B</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>C</name></expr></argument>)</argument_list></call> || <call><name>defined</name> <argument_list>(<argument><expr><name>D</name></expr></argument>)</argument_list></call></expr></cpp:if>
<comment type="line">//SDSUPPORT</comment>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

    </unit>
