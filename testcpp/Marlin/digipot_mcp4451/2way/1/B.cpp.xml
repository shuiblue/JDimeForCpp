<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="testcpp/Marlin/digipot_mcp4451/2way/1/B.cpp"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Configuration.h"</cpp:file></cpp:include>

<cpp:ifdef>#<cpp:directive>ifdef</cpp:directive> <name>DIGIPOT_I2C</name></cpp:ifdef>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Stream.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"utility/twi.h"</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Wire.h"</cpp:file></cpp:include>

<comment type="line">// Settings for the I2C based DIGIPOT (MCP4451) on Azteeg X3 Pro</comment>
<cpp:if>#<cpp:directive>if</cpp:directive> <expr><name>MOTHERBOARD</name> == 88</expr></cpp:if>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGIPOT_I2C_FACTOR</name></cpp:macro> <cpp:value>117.96</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGIPOT_I2C_MAX_CURRENT</name></cpp:macro> <cpp:value>1.736</cpp:value></cpp:define>
<cpp:else>#<cpp:directive>else</cpp:directive></cpp:else>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGIPOT_I2C_FACTOR</name></cpp:macro> <cpp:value>106.7</cpp:value></cpp:define>
<cpp:define>#<cpp:directive>define</cpp:directive> <cpp:macro><name>DIGIPOT_I2C_MAX_CURRENT</name></cpp:macro> <cpp:value>2.5</cpp:value></cpp:define>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>

<function><type><specifier>static</specifier> <name>byte</name></type> <name>current_to_wiper</name><parameter_list>( <param><decl><type><name>float</name></type> <name>current</name></decl></param> )</parameter_list><block>{
    <return>return <expr><call><name>byte</name><argument_list>(<argument><expr><call><name>ceil</name><argument_list>(<argument><expr><call><name>float</name><argument_list>(<argument><expr>(<name>DIGIPOT_I2C_FACTOR</name>*<name>current</name>)</expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</return>
}</block></function>

<function><type><specifier>static</specifier> <name>void</name></type> <name>i2c_send</name><parameter_list>(<param><decl><type><name>byte</name></type> <name>addr</name></decl></param>, <param><decl><type><name>byte</name></type> <name>a</name></decl></param>, <param><decl><type><name>byte</name></type> <name>b</name></decl></param>)</parameter_list>
<block>{
	<expr_stmt><expr><call><name><name>Wire</name>.<name>beginTransmission</name></name><argument_list>(<argument><expr><name>addr</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Wire</name>.<name>write</name></name><argument_list>(<argument><expr><name>a</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Wire</name>.<name>write</name></name><argument_list>(<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name><name>Wire</name>.<name>endTransmission</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">// This is for the MCP4451 I2C based digipot</comment>
<function><type><name>void</name></type> <name>digipot_i2c_set_current</name><parameter_list>( <param><decl><type><name>int</name></type> <name>channel</name></decl></param>, <param><decl><type><name>float</name></type> <name>current</name></decl></param> )</parameter_list>
<block>{
    <expr_stmt><expr><name>current</name> = <call><name>min</name><argument_list>( <argument><expr>(<name>float</name>) <call><name>max</name><argument_list>( <argument><expr><name>current</name></expr></argument>, <argument><expr>0.0f</expr></argument> )</argument_list></call></expr></argument>, <argument><expr><name>DIGIPOT_I2C_MAX_CURRENT</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// these addresses are specific to Azteeg X3 Pro, can be set to others,</comment>
    <comment type="line">// In this case first digipot is at address A0=0, A1= 0, second one is at A0=0, A1= 1</comment>
    <decl_stmt><decl><type><name>byte</name></type> <name>addr</name><init>= <expr>0x2C</expr></init></decl>;</decl_stmt> <comment type="line">// channel 0-3</comment>
    <if>if<condition>(<expr><name>channel</name> &gt;= 4</expr>)</condition><then> <block>{
    	<expr_stmt><expr><name>addr</name>= 0x2E</expr>;</expr_stmt> <comment type="line">// channel 4-7</comment>
    	<expr_stmt><expr><name>channel</name>-= 4</expr>;</expr_stmt>
    }</block></then></if>

    <comment type="line">// Initial setup</comment>
    <expr_stmt><expr><call><name>i2c_send</name><argument_list>( <argument><expr><name>addr</name></expr></argument>, <argument><expr>0x40</expr></argument>, <argument><expr>0xff</expr></argument> )</argument_list></call></expr>;</expr_stmt>
    <expr_stmt><expr><call><name>i2c_send</name><argument_list>( <argument><expr><name>addr</name></expr></argument>, <argument><expr>0xA0</expr></argument>, <argument><expr>0xff</expr></argument> )</argument_list></call></expr>;</expr_stmt>

    <comment type="line">// Set actual wiper value</comment>
    <decl_stmt><decl><type><name>byte</name></type> <name><name>addresses</name><index>[<expr>4</expr>]</index></name> <init>= <expr><block>{ <expr>0x00</expr>, <expr>0x10</expr>, <expr>0x60</expr>, <expr>0x70</expr> }</block></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name>i2c_send</name><argument_list>( <argument><expr><name>addr</name></expr></argument>, <argument><expr><name><name>addresses</name><index>[<expr><name>channel</name></expr>]</index></name></expr></argument>, <argument><expr><call><name>current_to_wiper</name><argument_list>(<argument><expr><name>current</name></expr></argument>)</argument_list></call></expr></argument> )</argument_list></call></expr>;</expr_stmt>
}</block></function>

<function><type><name>void</name></type> <name>digipot_i2c_init</name><parameter_list>()</parameter_list>
<block>{
    <decl_stmt><decl><type><specifier>const</specifier> <name>float</name></type> <name><name>digipot_motor_current</name><index>[]</index></name> <init>= <expr><name>DIGIPOT_I2C_MOTOR_CURRENTS</name></expr></init></decl>;</decl_stmt>
    <expr_stmt><expr><call><name><name>Wire</name>.<name>begin</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
    <comment type="line">// setup initial currents as defined in Configuration_adv.h</comment>
    <for>for(<init><decl><type><name>int</name></type> <name>i</name><init>=<expr>0</expr></init></decl>;</init><condition><expr><name>i</name>&lt;=<sizeof>sizeof<argument_list>(<argument><expr><name>digipot_motor_current</name></expr></argument>)</argument_list></sizeof>/<sizeof>sizeof<argument_list>(<argument><expr><name>float</name></expr></argument>)</argument_list></sizeof></expr>;</condition><incr><expr><name>i</name>++</expr></incr>) <block>{
        <expr_stmt><expr><call><name>digipot_i2c_set_current</name><argument_list>(<argument><expr><name>i</name></expr></argument>, <argument><expr><name><name>digipot_motor_current</name><index>[<expr><name>i</name></expr>]</index></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
    }</block></for>
}</block></function>
<cpp:endif>#<cpp:directive>endif</cpp:directive></cpp:endif>
</unit>
