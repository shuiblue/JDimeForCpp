<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src">

<unit xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="testcpp/dependencyGraph/1/A.cpp"><decl_stmt><decl><type><name>int</name></type> <name>filesize</name><init>=<expr>9</expr></init></decl>;</decl_stmt>
<function_decl><type><name>void</name></type> <name>print</name><parameter_list>(<param><decl><type><name>int</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
<function_decl><type><name>int</name></type> <name>write</name><parameter_list>(<param><decl><type><name>String</name></type> <name>a</name></decl></param>)</parameter_list>;</function_decl>
<decl_stmt><decl><type><name>String</name></type> <name>file</name><init>=<expr>"aaa"</expr></init></decl>;</decl_stmt>
<function><type><name>void</name></type> <name>CardReader</name><parameter_list>()</parameter_list>
<block>{
   <expr_stmt><expr><name>filesize</name> = 0</expr>;</expr_stmt>
   <expr_stmt><expr><call><name>print</name><argument_list>(<argument><expr><call><name>write</name><argument_list>(<argument><expr><name>filesize</name></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>write</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   <expr_stmt><expr><call><name>write</name><argument_list>(<argument><expr><name>file</name></expr></argument>,<argument><expr><name>b</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function></unit>

<unit xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C++" filename="testcpp/dependencyGraph/1/B.cpp">        
<decl_stmt><decl><type><name><name>ArrayList</name><argument_list>&lt;<argument><expr><name>String</name></expr></argument>&gt;</argument_list></name></type> <name>inputFilePaths</name> <init>= <expr>new <call><name><name>ArrayList</name><argument_list>&lt;&gt;</argument_list></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>result</name> <init>= <expr>""</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>String</name></type> <name>outputPath</name> <init>= <expr>"testcpp/mergedRepo/3-wayMerge/upstream"</expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>filePath</name> <init>= <expr><name>path</name> + <name>fork</name> + "/Marlin/Marlin/" + <name>mergedFile</name></expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>f</name> <init>= <expr>new <call><name>File</name><argument_list>(<argument><expr><name>filePath</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <decl_stmt><decl><type><name>String</name></type> <name>upstreamOldPath</name> <init>= <expr>"testcpp/upstreamVar/" + <name>fork</name>+"Upstream/Marlin/Marlin/"</expr></init></decl>;</decl_stmt>
        <decl_stmt><decl><type><name>File</name></type> <name>f1</name> <init>= <expr>new <call><name>File</name><argument_list>(<argument><expr><name>upstreamOldPath</name>+<name>mergedFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

        <if>if <condition>(<expr><call><name><name>f</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
            <expr_stmt><expr><call><name><name>inputFilePaths</name>.<name>add</name></name><argument_list>(<argument><expr><name>fork</name> + "/Marlin/Marlin/+" + <name>fork</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>outputPath</name> += "_" + <name>fork</name></expr>;</expr_stmt>

            <if>if <condition>(<expr><call><name><name>f1</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>outputPath</name> += "_oldUpstream"</expr>;</expr_stmt><empty_stmt>;</empty_stmt>
            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>upstreamOldPath</name> + " not exist!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>outputPath</name> += "_no_oldUpstream"</expr>;</expr_stmt>
            }</block></else></if>

        }</block></then> <else>else <block>{
            <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>filePath</name> + " not exist!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            <expr_stmt><expr><name>outputPath</name> += "_no_" + <name>fork</name></expr>;</expr_stmt>
            <if>if <condition>(<expr><call><name><name>f1</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                <expr_stmt><expr><name>outputPath</name> += "_oldUpstream"</expr>;</expr_stmt>

            }</block></then> <else>else <block>{
                <expr_stmt><expr><call><name><name>System</name>.<name>out</name>.<name>println</name></name><argument_list>(<argument><expr><name>upstreamOldPath</name> + " not exist!"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><name>outputPath</name> += "_no_oldUpstream"</expr>;</expr_stmt>

                <try>try <block>{
                    <decl_stmt><decl><type><name>String</name></type> <name>statisticsPath</name> <init>= <expr>"testcpp/statistics/result.txt"</expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>String</name></type> <name>upstreamNEW</name> <init>= <expr><call><name>readResult</name><argument_list>(<argument><expr>"testcpp/originMarlin/upstream/Marlin/Marlin/"+<name>mergedFile</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                    <decl_stmt><decl><type><name>IOFunctionSet</name></type> <name>ioFunctionSet</name> <init>= <expr>new <call><name>IOFunctionSet</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                    <expr_stmt><expr><call><name><name>ioFunctionSet</name>.<name>writeTofile</name></name><argument_list>(<argument><expr>"upstream(NEW) UNIQUE FILE : " + <name>mergedFile</name> + " ,LOC: " + <call><name><name>upstreamNEW</name>.<name>split</name></name><argument_list>(<argument><expr>"\n"</expr></argument>)</argument_list></call>.<name>length</name>+1+ "\n"</expr></argument>, <argument><expr><name>statisticsPath</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                }</block> <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
                    <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></catch></try>
            }</block></else></if>
        }</block></else></if>


        <expr_stmt><expr><name>outputPath</name>+="/"+<name>mergedFile</name></expr>;</expr_stmt>

        <if>if <condition>(<expr><call><name><name>inputFilePaths</name>.<name>size</name></name><argument_list>()</argument_list></call> &gt; 0</expr>)</condition><then> <block>{
            <decl_stmt><decl><type><name>String</name></type> <name>commandLine</name> <init>= <expr>"-mode,nway,-output," + <name>outputPath</name> + ","
                    + <name>prefix</name> + "upstream/Marlin/Marlin/" + <name>mergedFile</name> + "+upstream,"</expr></init></decl>;</decl_stmt>
            <decl_stmt><decl><type><name>String</name></type> <name>title</name> <init>=<expr>3+ " way merge: " + <name>mergedFile</name> + " file. 'upstream' repo merge with fork '"</expr></init></decl>;</decl_stmt>
            <for>for (<init><decl><type><name>int</name></type> <name>i</name> <init>= <expr>0</expr></init></decl>;</init> <condition><expr><name>i</name> &lt; <call><name><name>inputFilePaths</name>.<name>size</name></name><argument_list>()</argument_list></call></expr>;</condition> <incr><expr><name>i</name>++</expr></incr>) <block>{
                <decl_stmt><decl><type><name>String</name></type> <name>forkName</name> <init>=<expr><call><name><name>inputFilePaths</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>split</name><argument_list>(<argument><expr>"\\+"</expr></argument>)</argument_list></call><index>[<expr>1</expr>]</index></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><name>commandLine</name> += <name>prefix</name> + <call><name><name>inputFilePaths</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>split</name><argument_list>(<argument><expr>"\\+"</expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index> + <name>mergedFile</name> + "+" + <name>forkName</name></expr>;</expr_stmt>
                <expr_stmt><expr><name>title</name> += <call><name><name>inputFilePaths</name>.<name>get</name></name><argument_list>(<argument><expr><name>i</name></expr></argument>)</argument_list></call>.<call><name>split</name><argument_list>(<argument><expr>"/"</expr></argument>)</argument_list></call><index>[<expr>0</expr>]</index> + "' "</expr>;</expr_stmt>
                <expr_stmt><expr><name>commandLine</name> += ","</expr>;</expr_stmt>
                <expr_stmt><expr><name>commandLine</name> +=<name>upstreamOldPath</name>+<name>mergedFile</name>+"+"+<name>fork</name>+"Upstream"</expr>;</expr_stmt>


            }</block></for>
            <decl_stmt><decl><type><name>String</name><index>[]</index></type> <name>arg</name> <init>= <expr><call><name><name>commandLine</name>.<name>split</name></name><argument_list>(<argument><expr>","</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

            <try>try <block>{
                <decl_stmt><decl><type><name>long</name></type> <name>start</name> <init>= <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>Main</name>.<name>main</name></name><argument_list>(<argument><expr><name>arg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <decl_stmt><decl><type><name>long</name></type> <name>end</name> <init>= <expr><call><name><name>System</name>.<name>currentTimeMillis</name></name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>long</name></type> <name>runTime</name> <init>= <expr><name>end</name> - <name>start</name></expr></init></decl>;</decl_stmt>

                <decl_stmt><decl><type><name>File</name></type> <name>file</name> <init>= <expr>new <call><name>File</name><argument_list>(<argument><expr>"testcpp/mergedResult/runTime.txt"</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>

                <comment type="line">// if file doesnt exists, then create it</comment>
                <if>if <condition>(<expr>!<call><name><name>file</name>.<name>exists</name></name><argument_list>()</argument_list></call></expr>)</condition><then> <block>{
                    <expr_stmt><expr><call><name><name>file</name>.<name>createNewFile</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
                }</block></then></if>
                <decl_stmt><decl><type><name>FileWriter</name></type> <name>fw</name> <init>= <expr>new <call><name>FileWriter</name><argument_list>(<argument><expr><call><name><name>file</name>.<name>getAbsoluteFile</name></name><argument_list>()</argument_list></call></expr></argument>, <argument><expr>true</expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <decl_stmt><decl><type><name>BufferedWriter</name></type> <name>bw</name> <init>= <expr>new <call><name>BufferedWriter</name><argument_list>(<argument><expr><name>fw</name></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
                <expr_stmt><expr><call><name><name>bw</name>.<name>write</name></name><argument_list>(<argument><expr><name>title</name> + "\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bw</name>.<name>write</name></name><argument_list>(<argument><expr><call><name><name>String</name>.<name>valueOf</name></name><argument_list>(<argument><expr><name>runTime</name></expr></argument>)</argument_list></call> + "\n"</expr></argument>)</argument_list></call></expr>;</expr_stmt>
                <expr_stmt><expr><call><name><name>bw</name>.<name>close</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>


            }</block> <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch> <catch>catch <parameter_list>(<param><decl><type><name>ParseException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch> <catch>catch <parameter_list>(<param><decl><type><name>InterruptedException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>



            <try>try <block>{
                <expr_stmt><expr><name>result</name> = <call><name>readResult</name><argument_list>(<argument><expr><name>outputPath</name> + <name>suffix</name></expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>"\n"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>" "</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call>.<call><name>replace</name><argument_list>(<argument><expr>"\t"</expr></argument>, <argument><expr>""</expr></argument>)</argument_list></call></expr>;</expr_stmt>
            }</block> <catch>catch <parameter_list>(<param><decl><type><name>IOException</name></type> <name>e</name></decl></param>)</parameter_list> <block>{
                <expr_stmt><expr><call><name><name>e</name>.<name>printStackTrace</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
            }</block></catch></try>
        }</block></then></if>
        <return>return  <expr><name>result</name></expr>;</return>
    }</unit>

</unit>
