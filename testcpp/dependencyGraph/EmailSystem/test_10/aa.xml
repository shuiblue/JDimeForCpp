<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.sdml.info/srcML/src" xmlns:cpp="http://www.sdml.info/srcML/cpp" language="C" filename="Client.c"><cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdlib.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;stdio.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>&lt;string.h&gt;</cpp:file></cpp:include>
<cpp:include>#<cpp:directive>include</cpp:directive> <cpp:file>"Client.h"</cpp:file></cpp:include>

<comment type="line">// outgoing emails leave the client at this point. here they are put in an outgoing queue instead.</comment>
<function><type><name>void</name></type>
<name>mail</name> <parameter_list>(<param><decl><type>struct <name>client</name> *</type><name>client</name></decl></param>, <param><decl><type>struct <name>email</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">//TODO </comment>
<comment type="line">//  printf ("=&gt; %s MAIL\n", client-&gt;name);</comment>
<comment type="line">//  printMail (msg);</comment>
  <if>if <condition>(<expr>!<name><name>client</name>-&gt;<name>outgoingBuffer</name></name></expr>)</condition><then>
    <expr_stmt><expr><name><name>client</name>-&gt;<name>outgoingBuffer</name></name> = <call><name>list_create</name> <argument_list>(<argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></then>
  <else>else
    <expr_stmt><expr><call><name>list_insert_after</name> <argument_list>(<argument><expr><name><name>client</name>-&gt;<name>outgoingBuffer</name></name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt></else></if>
}</block></function>

<comment type="line">// emails to be sent are processed by this method before beeing mailed.</comment>
<function><type><name>void</name></type>
<name>outgoing</name> <parameter_list>(<param><decl><type>struct <name>client</name> *</type><name>client</name></decl></param>, <param><decl><type>struct <name>email</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><name><name>msg</name>-&gt;<name>from</name></name> = <call><name>strdup</name> <argument_list>(<argument><expr><name><name>client</name>-&gt;<name>name</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
  <expr_stmt><expr><call><name>mail</name> <argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>

<comment type="line">// incoming emails reach the user at this point. here they are put in a mailbox.</comment>
<function><type><name>void</name></type>
<name>deliver</name> <parameter_list>(<param><decl><type>struct <name>client</name> *</type><name>client</name></decl></param>, <param><decl><type>struct <name>email</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
  <comment type="line">//TODO</comment>
  <comment type="line">// printf ("=&gt; %s DELIVER\n", client-&gt;name);</comment>
  <comment type="line">//printMail (msg);</comment>
}</block></function>

<comment type="line">// incoming emails are processed by this method before delivery.</comment>
<function><type><name>void</name></type>
<name>incoming</name> <parameter_list>(<param><decl><type>struct <name>client</name> *</type><name>client</name></decl></param>, <param><decl><type>struct <name>email</name> *</type><name>msg</name></decl></param>)</parameter_list>
<block>{
  <expr_stmt><expr><call><name>deliver</name> <argument_list>(<argument><expr><name>client</name></expr></argument>, <argument><expr><name>msg</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
}</block></function>
</unit>
